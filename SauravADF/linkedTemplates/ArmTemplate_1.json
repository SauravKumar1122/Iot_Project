{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "SauravADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Cases_deaths_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_cases_deaths",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_country_lookup",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_cleansed_sink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						},
						{
							"name": "pivot1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          country_code as string,",
						"          continent as string,",
						"          population as integer,",
						"          indicator as string,",
						"          daily_count as short,",
						"          date as date,",
						"          rate_14_day as double,",
						"          source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1 filter(continent =='Europe' && not(isNull(country_code))) ~> filter1",
						"filter1 select(mapColumn(",
						"          country,",
						"          country_code,",
						"          population,",
						"          indicator,",
						"          daily_count,",
						"          reported_date = date,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 pivot(groupBy(country,",
						"          country_code,",
						"          population,",
						"          source,",
						"          reported_date),",
						"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
						"     count = sum(daily_count),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"pivot1, source2 lookup(pivot1@country == source2@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          country = pivot1@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population = pivot1@population,",
						"          cases_count = {countconfirmed cases},",
						"          deaths_count = countdeaths,",
						"          reported_date,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Hospital_admissions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_hospital_admissions",
								"type": "DatasetReference"
							},
							"name": "source1Hospitaladmissions"
						},
						{
							"dataset": {
								"referenceName": "ds_country_lookup",
								"type": "DatasetReference"
							},
							"name": "source2Countrylookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_Hospital_Admissions",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_sink_hosptalAdmissionsDaily",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "select1RemoveURL"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						},
						{
							"name": "split1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "select2"
						},
						{
							"name": "select3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          indicator as string,",
						"          date as string,",
						"          year_week as string,",
						"          value as string,",
						"          source as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1Hospitaladmissions",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2Countrylookup",
						"source1Hospitaladmissions select(mapColumn(",
						"          country,",
						"          indicator,",
						"          date,",
						"          year_week,",
						"          value,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1RemoveURL",
						"select1RemoveURL, source2Countrylookup lookup(select1RemoveURL@country == source2Countrylookup@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          country = select1RemoveURL@country,",
						"          indicator,",
						"          date,",
						"          year_week,",
						"          value,",
						"          source,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 split(indicator=='Weekly new hospital admissions per 100k' || indicator=='Weekly new ICU admissions per 100k',",
						"     disjoint: false) ~> split1@(Weekly, Daily)",
						"split1@Weekly sort(desc(year_week, true),",
						"     asc(country, true)) ~> sort1",
						"sort1 select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_year_week = year_week,",
						"          indicator,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"split1@Daily select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date = date,",
						"          indicator,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"select3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDtype2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_emp_joinerssource",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_sql",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sqlsink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_sqlsink",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "HashInput"
						},
						{
							"name": "HashRef"
						},
						{
							"name": "exists1"
						},
						{
							"name": "SetToActive"
						},
						{
							"name": "exists2"
						},
						{
							"name": "setToInactive"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          dept as string,",
						"          startdate as date 'MM-dd-yyyy'",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          dept as string,",
						"          isActive as integer,",
						"          startdate as date,",
						"          enddate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1 derive(HASHinput = md5(name,dept)) ~> HashInput",
						"source2 derive(HASHsql = md5(name,dept)) ~> HashRef",
						"HashInput, HashRef exists(HASHinput == HASHsql,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 derive(isActive = 1,",
						"          enddate = 'NULL') ~> SetToActive",
						"HashRef, HashInput exists(HASHsql == HASHinput,",
						"     negate:false,",
						"     broadcast: 'auto')~> exists2",
						"exists2 derive(isActive = 0,",
						"          enddate = toDate(currentUTC())) ~> setToInactive",
						"setToInactive alterRow(updateIf(true())) ~> alterRow1",
						"SetToActive sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          name as string,",
						"          dept as string,",
						"          isActive as integer,",
						"          startdate as date,",
						"          enddate as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          dept,",
						"          isActive,",
						"          startdate,",
						"          enddate",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          name as string,",
						"          dept as string,",
						"          isActive as integer,",
						"          startdate as date,",
						"          enddate as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['id','name','dept'],",
						"     skipKeyWrites:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          dept,",
						"          isActive,",
						"          startdate,",
						"          enddate",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_iot_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_iot_sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Hospital_admissions_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Hospital_admissions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1Hospitaladmissions": {},
									"source2Countrylookup": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-08T07:57:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Hospital_admissions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cases_and_deaths_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Cases_deaths_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-07T12:20:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Cases_deaths_dataflow')]"
			]
		}
	]
}